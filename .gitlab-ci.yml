variables:
  IMAGE_NAME: docker-certbot-dns-ionos
  VERSION: "2024.1.8"
  CERTBOT_VERSION: v2.9.0
  REGISTRY_IMAGE: ${HARBOR_HOST}/${HARBOR_PROJECT}/${IMAGE_NAME}
  REGISTRY_IMAGE_PUBLIC: $DOCKERHUB_USER/$IMAGE_NAME
  BUILDER_IMAGE: "${IMAGE_NAME}-builder-$CI_CONCURRENT_ID"
  PUSHRM_IMAGE: "chko/docker-pushrm:1.9.0"
  IMAGE_DESCRIPTION: "Docker image for certbot-dns-ionos plugin" # max 100 characters

image: docker:$DOCKER_VERSION

stages:
  - linting
  - build
  - publish

before_script:
  - echo ${HARBOR_PASSWORD} | docker login -u ${HARBOR_USERNAME} --password-stdin ${HARBOR_HOST}
  - echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin
  - docker run --privileged --rm tonistiigi/binfmt --install all >/dev/null
  - docker buildx create --use --bootstrap --name ${BUILDER_IMAGE} --config=buildkitd.toml

after_script:
  - docker buildx stop ${BUILDER_IMAGE}
  - docker buildx rm ${BUILDER_IMAGE}

buildkit_toml:
  stage: .pre
  image: alpine
  before_script: [] # to exclude default before_script
  after_script: [] # to exclude default after_script
  script:
    - apk add envsubst
    - envsubst < buildkitd.toml.tmpl > buildkitd.toml
  artifacts:
    paths:
      - buildkitd.toml
  # rules:
  #   - changes:
  #       - Dockerfile*
  # when: manual

.hadolint:
  stage: linting
  image: registry.gitlab.com/pipeline-components/hadolint:latest
  script:
    - hadolint Dockerfile
  rules:
    - changes:
        - Dockerfile*
  when: manual

build_publish:
  stage: build
  script:
    - docker buildx bake --push --file docker-bake.hcl --progress plain
  rules:
    - changes:
        - Dockerfile*
        - docker-bake.hcl
  when: manual

publish_readme:
  stage: publish
  before_script: [] # to exclude default before_script
  after_script: [] # to exclude default after_script
  script:
    - docker run --rm
      -v "$(pwd):/mnt"
      -e DOCKER_USER=${DOCKERHUB_USER} -e DOCKER_PASS=${DOCKERHUB_PASSWORD}
      ${PUSHRM_IMAGE} --file /mnt/README.md
      --short "${IMAGE_DESCRIPTION}" --debug ${REGISTRY_IMAGE_PUBLIC}
    - docker run --rm
      -v "$(pwd):/mnt"
      -e DOCKER_USER=${HARBOR_USERNAME} -e DOCKER_PASS=${HARBOR_PASSWORD}
      ${PUSHRM_IMAGE} --file /mnt/README.md
      --provider harbor2 --debug ${REGISTRY_IMAGE}
